<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Elixir good code</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://elixir.goodcode.in/"/>
  <updated>2017-07-03T08:00:43.957Z</updated>
  <id>http://elixir.goodcode.in/</id>
  
  <author>
    <name>12s12m</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to run a chunk of code when your Elixir/Phoenix app starts</title>
    <link href="http://elixir.goodcode.in/2017/07/03/how-to-run-a-chunk-of-code-when-your-elixir-phoenix-app-starts/"/>
    <id>http://elixir.goodcode.in/2017/07/03/how-to-run-a-chunk-of-code-when-your-elixir-phoenix-app-starts/</id>
    <published>2017-07-03T12:48:15.000Z</published>
    <updated>2017-07-03T08:00:43.957Z</updated>
    
    <content type="html"><![CDATA[<p>There are two ways in which you can run some code whenever your Elixir/Phoenix
application starts.</p>
<ol>
<li><p>Put the code directly in your <code>application.ex</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">defmodule Danny.Application do</div><div class="line">  use Application</div><div class="line"></div><div class="line">  # ...</div><div class="line">  def start(_type, _args) do</div><div class="line">    # ...</div><div class="line">    &#123;:ok, pid&#125; = Supervisor.start_link(children, opts)</div><div class="line">    # code to run at startup</div><div class="line">    MyStartupCode.run</div><div class="line">    &#123;:ok, pid&#125;</div><div class="line">  end</div><div class="line"></div><div class="line">end</div></pre></td></tr></table></figure>
</li>
<li><p>Use a <code>:temporary</code> worker. Your supervision tree can even contain workers
which run once and then stop <code>:normal</code>ly. This code gives you more control
over how you can handle failures when the startup code misbehaves. In my app <a href="https://sprymesh.com" target="_blank" rel="external">https://sprymesh.com</a>
I have a cache warmer which is executed on startup. Here is the relevant code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">defmodule Danny.Application do</div><div class="line">  use Application</div><div class="line"></div><div class="line">  # ...</div><div class="line">  def start(_type, _args) do</div><div class="line">    children = [</div><div class="line">      supervisor(Danny.Repo, []),</div><div class="line">      # ...</div><div class="line">      worker(CacheWarmer, [], restart: :temporary) # this worker starts, does its thing and dies</div><div class="line">      # ...</div><div class="line">      ]</div><div class="line"></div><div class="line">    opts = [strategy: :one_for_one, name: Danny.Supervisor]</div><div class="line">    Supervisor.start_link(children, opts)</div><div class="line">  end</div><div class="line"></div><div class="line">end</div><div class="line"></div><div class="line">defmodule CacheWarmer do</div><div class="line">  import Logger, only: [debug: 1]</div><div class="line"></div><div class="line">  use GenServer</div><div class="line"></div><div class="line">  def start_link do</div><div class="line">    GenServer.start_link(__MODULE__, [:ok], name: __MODULE__)</div><div class="line">  end</div><div class="line"></div><div class="line">  def init(state) do</div><div class="line">    send(self(), :work)</div><div class="line">    &#123;:ok, state&#125;</div><div class="line">  end</div><div class="line"></div><div class="line">  def handle_info(:work, state) do</div><div class="line">    # warming the caches</div><div class="line">    debug &quot;warming the cache&quot;</div><div class="line">    # ...</div><div class="line">    debug &quot;finished warming the cache, shutting down&quot;</div><div class="line">    &#123;:stop, :normal, state&#125;</div><div class="line">  end</div><div class="line">end</div></pre></td></tr></table></figure>
<p>That’s all! Now, when your application starts, the supervisor will start the <code>CacheWarmer</code> gen server with a restart policy of <code>:temporary</code>.
From the erlang <a href="http://erlang.org/doc/design_principles/sup_princ.html" target="_blank" rel="external">documenation for supervisors</a></p>
<blockquote>
<p>A temporary child process is never restarted (not even when the supervisor restart strategy is rest_for_one or one_for_all and a sibling death causes the temporary process to be terminated).</p>
<p>A transient child process is restarted only if it terminates abnormally, that is, with an exit reason other than normal, shutdown, or <code>{shutdown,Term}</code></p>
</blockquote>
<p>You can use the <code>:temporary</code> restart or the <code>:transient</code> restart policy based on your needs.</p>
<p>The other thing to note here is the code for our <code>CacheWarmer</code> GenServer.
It sends itself a message in the <code>init</code> callback, so as soon as it starts up it enters the <code>handle_info(:work, state)</code> callback.
This is where you would have the code which would run at startup. And once your code is executed, our <code>handle_info</code> callback returns
a <code>{:stop, :normal, state}</code> which signals the GenServer to exit nicely. The supervisor on seeing the CacheWarmer GenServer exit normally accepts that the CacheWarmer worker’s time has come and doesn’t try to restart it.</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;There are two ways in which you can run some code whenever your Elixir/Phoenix
application starts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Put the code directly 
    
    </summary>
    
    
      <category term="elixir" scheme="http://elixir.goodcode.in/tags/elixir/"/>
    
      <category term="phoenix" scheme="http://elixir.goodcode.in/tags/phoenix/"/>
    
      <category term="gen_stage" scheme="http://elixir.goodcode.in/tags/gen-stage/"/>
    
      <category term="startup" scheme="http://elixir.goodcode.in/tags/startup/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://elixir.goodcode.in/2017/07/03/hello-world/"/>
    <id>http://elixir.goodcode.in/2017/07/03/hello-world/</id>
    <published>2017-07-03T12:00:00.000Z</published>
    <updated>2017-07-03T08:00:43.957Z</updated>
    
    <content type="html"><![CDATA[<p>Hello, World!</p>
<p>In this blog, I’ll try to share the good coding practices that I have learnt while writing Elixir!</p>
<p>Hope you find it useful :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello, World!&lt;/p&gt;
&lt;p&gt;In this blog, I’ll try to share the good coding practices that I have learnt while writing Elixir!&lt;/p&gt;
&lt;p&gt;Hope you f
    
    </summary>
    
    
  </entry>
  
</feed>
